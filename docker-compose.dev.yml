version: '3.8'

services:
  # MongoDB for Product Service
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root_password
      MONGO_INITDB_DATABASE: product_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - shop_network

  # PostgreSQL for User Service
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - shop_network

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    ports:
      - "8080:8080"  # HTTP API
      - "50051:50051"  # gRPC
    environment:
      - ENV=development
      - MONGODB_URI=mongodb://root:root_password@mongodb:27017
      - MONGODB_DATABASE=product_db
      - MONGODB_COLLECTION=products
      - MONGODB_USERNAME=root
      - MONGODB_PASSWORD=root_password
      - LOG_LEVEL=info
      - LOG_JSON=false
      - LOG_PRETTY=true
      - GRPC_PORT=50051
      - HTTP_PORT=8080
      - METRICS_ENABLED=true
      - METRICS_PATH=/metrics
      - TRACING_ENABLED=false
    depends_on:
      - mongodb
    networks:
      - shop_network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    ports:
      - "8081:8081"  # HTTP API
      - "9091:9091"  # gRPC
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=users
      - HTTP_PORT=8081
      - GRPC_PORT=9091
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shop_network
    restart: unless-stopped

volumes:
  mongodb_data:
  postgres_data:

networks:
  shop_network:
    driver: bridge 