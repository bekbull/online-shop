syntax = "proto3";

package product;

option go_package = "github.com/bekbull/online-shop/proto/product";

service ProductService {
  // Product management
  rpc CreateProduct(CreateProductRequest) returns (ProductResponse) {}
  rpc GetProduct(GetProductRequest) returns (ProductResponse) {}
  rpc UpdateProduct(UpdateProductRequest) returns (ProductResponse) {}
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse) {}
  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse) {}
  
  // Inventory management
  rpc UpdateInventory(UpdateInventoryRequest) returns (UpdateInventoryResponse) {}
  rpc CheckStock(CheckStockRequest) returns (CheckStockResponse) {}
  
  // Streaming inventory updates (for real-time monitoring)
  rpc WatchInventory(WatchInventoryRequest) returns (stream InventoryUpdate) {}
}

// Product data structures
message Product {
  string id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
  repeated string image_urls = 5;
  string category = 6;
  InventoryInfo inventory = 7;
  repeated string tags = 8;
  map<string, string> attributes = 9;
  bool active = 10;
  int64 created_at = 11;
  int64 updated_at = 12;
}

message InventoryInfo {
  int32 quantity = 1;
  string sku = 2;
  bool in_stock = 3;
  int32 reserved = 4;
}

// Request and Response messages
message CreateProductRequest {
  string name = 1;
  string description = 2;
  double price = 3;
  repeated string image_urls = 4;
  string category = 5;
  InventoryInfo inventory = 6;
  repeated string tags = 7;
  map<string, string> attributes = 8;
}

message GetProductRequest {
  string id = 1;
}

message UpdateProductRequest {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
  optional double price = 4;
  repeated string image_urls = 5;
  optional string category = 6;
  optional InventoryInfo inventory = 7;
  repeated string tags = 8;
  map<string, string> attributes = 9;
  optional bool active = 10;
}

message DeleteProductRequest {
  string id = 1;
}

message DeleteProductResponse {
  bool success = 1;
  string message = 2;
}

message ListProductsRequest {
  int32 page = 1;
  int32 page_size = 2;
  string category = 3;
  repeated string tags = 4;
  double min_price = 5;
  double max_price = 6;
  bool in_stock_only = 7;
  string sort_by = 8;
  bool sort_desc = 9;
  string search_term = 10;
}

message ListProductsResponse {
  repeated Product products = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
  int32 total_pages = 5;
}

message ProductResponse {
  Product product = 1;
}

// Inventory specific messages
message UpdateInventoryRequest {
  string product_id = 1;
  int32 quantity_change = 2; // Can be positive (add) or negative (remove)
  string operation_id = 3; // For idempotency
  string operation_type = 4; // e.g., "purchase", "restock", "reservation"
}

message UpdateInventoryResponse {
  bool success = 1;
  InventoryInfo updated_inventory = 2;
  string message = 3;
}

message CheckStockRequest {
  string product_id = 1;
  int32 quantity = 2;
}

message CheckStockResponse {
  bool available = 1;
  int32 current_stock = 2;
}

message WatchInventoryRequest {
  repeated string product_ids = 1; // Empty means all products
  int32 threshold = 2; // Only send updates when stock drops below this threshold
}

message InventoryUpdate {
  string product_id = 1;
  string product_name = 2;
  InventoryInfo inventory = 3;
  int64 timestamp = 4;
} 